# Optimized docker-compose.yml for performance
version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      # Use multi-stage for different targets:
      # dockerfile: Dockerfile.multi-stage
      # target: app-with-models
    container_name: hotel-booking-backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - UVICORN_WORKERS=1
      - UVICORN_WORKER_CLASS=uvicorn.workers.UvicornWorker
    volumes:
      # Mount models for updates without rebuilding
      - ./backend/models:/app/models:ro
      # Persistent data storage
      - backend_data:/app/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hotel-booking-frontend
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - app-network

volumes:
  backend_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
